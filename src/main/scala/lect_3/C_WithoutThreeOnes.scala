package lect_3

/**
 * В левом верхнем углу прямоугольной таблицы размером n⋅m находится черепашка. В каждой клетке таблицы записано некоторое число.
 * Черепашка может перемещаться вправо или вниз, при этом маршрут черепашки заканчивается в правом нижнем углу таблицы.

 * Подсчитаем сумму чисел, записанных в клетках, через которую проползла черепашка (включая начальную и конечную клетку).
 * Найдите наибольшее возможное значение этой суммы и маршрут, на котором достигается эта сумма.

 * Входные данные
 * В первой строке входных данных записаны два натуральных числа n и m, не превосходящих 100 — размеры таблицы.
 * Далее идет n строк, каждая из которых содержит m чисел, разделенных пробелами — описание таблицы.
 * Все числа в клетках таблицы целые и могут принимать значения от 0 до 100.

 * Выходные данные
 * Первая строка выходных данных содержит максимальную возможную сумму, вторая – маршрут, на котором достигается эта сумма.
 * Маршрут выводится в виде последовательности, которая должна содержать n−1 букву D, означающую передвижение вниз,
 * и m−1 букву R, означающую передвижение направо. Если таких последовательностей несколько, необходимо вывести ровно одну (любую) из них.

 * Пример
 * входные данные
 * 5 5
 * 9 9 9 9 9
 * 3 0 0 0 0
 * 9 9 9 9 9
 * 6 6 6 6 8
 * 9 9 9 9 9
 * выходные данные
 * 74
 * D D R R R R D D
 * */

import scala.io.StdIn

object C_WithoutThreeOnes extends App {
  def func(num: Int): Int = {
    val length = if (num < 2) 3 else num + 1

    val dp = new Array[Int](length)

    dp(0) = 1
    dp(1) = 2
    dp(2) = 4

    if (num > 2)
      for (i <- 3 to num)
        dp(i) = dp(i - 1) + dp(i - 2) + dp(i - 3)

    dp(num)
  }

  val input = StdIn.readInt()

  val answer = if (input < 0) 0 else func(input)

  println(answer)
}
